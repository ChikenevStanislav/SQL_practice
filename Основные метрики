Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:
1)Число новых пользователей.
2)Число новых курьеров.
3)Общее число пользователей на текущий день.
4)Общее число курьеров на текущий день.
Колонки с показателями назовите соответственно new_users, new_couriers, total_users, total_couriers. 
Колонку с датами назовите date. Проследите за тем, чтобы показатели были выражены целыми числами. 
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, new_users, new_couriers, total_users, total_couriers
    
select n1.date, new_users, new_couriers,(SUM(new_users) OVER(ORDER BY n1.date))::int total_users,(SUM(new_couriers) OVER(ORDER BY n2.date))::int total_couriers
from (
      select date, count(user_id) as new_users
            from (
                    select min(time::date) as date,user_id
                    from user_actions
                    group by user_id
                 ) as ua
     group by date) as n1 
JOIN 
(select date, count(courier_id) as new_couriers
    from (
            select min(time::date) as date, courier_id
            from courier_actions
            group by courier_id
         ) as ca
 group by date) as n2
on n1.date = n2.date
order by date
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Рассчитайте следующие показатели:
1)Прирост числа новых пользователей.
2)Прирост числа новых курьеров.
3)Прирост общего числа пользователей.
4)Прирост общего числа курьеров.
Показатели, рассчитанные на предыдущем шаге, также включите в результирующую таблицу.
Колонки с новыми показателями назовите соответственно new_users_change, new_couriers_change, total_users_growth, total_couriers_growth. Колонку с датами назовите date.
Все показатели прироста считайте в процентах относительно значений в предыдущий день. При расчёте показателей округляйте значения до двух знаков после запятой.
Результирующая таблица должна быть отсортирована по возрастанию даты.
Поля в результирующей таблице: date, new_users, new_couriers, total_users, total_couriers, new_users_change, new_couriers_change, total_users_growth, total_couriers_growth

select date,
       new_users, 
       new_couriers,
       total_users,
       total_couriers,
       new_users_change ,
       new_couriers_change,    
       ROUND((total_users - LAG(total_users,1) over(order by date))*100::decimal/LAG(total_users,1) over(order by date),2) as total_users_growth,
       ROUND((total_couriers - LAG(total_couriers,1) over(order by date))*100::decimal/LAG(total_couriers,1) over(order by date),2) as total_couriers_growth
from (
select n1.date,
       new_users, 
       new_couriers,
       (SUM(new_users) OVER(ORDER BY n1.date))::int total_users,
       (SUM(new_couriers) OVER(ORDER BY n2.date))::int total_couriers,
       ROUND((new_users - LAG(new_users,1) over(order by n1.date))*100::decimal/LAG(new_users,1) over(order by n1.date),2) as new_users_change ,
       ROUND((new_couriers - LAG(new_couriers,1) over(order by n2.date))*100::decimal/LAG(new_couriers,1) over(order by n2.date),2) as new_couriers_change
from (
      select date, count(user_id) as new_users
            from (
                    select min(time::date) as date,user_id
                    from user_actions
                    group by user_id
                 ) as ua
     group by date) as n1 
JOIN 
(select date, count(courier_id) as new_couriers
    from (
            select min(time::date) as date, courier_id
            from courier_actions
            group by courier_id
         ) as ca
 group by date) as n2
on n1.date = n2.date
order by date) as niva_1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Для каждого дня, представленного в таблицах user_actions и courier_actions, рассчитайте следующие показатели:
1)Число платящих пользователей.
2)Число активных курьеров.
3)Долю платящих пользователей в общем числе пользователей на текущий день.
4)Долю активных курьеров в общем числе курьеров на текущий день.
Колонки с показателями назовите соответственно paying_users, active_couriers, paying_users_share, active_couriers_share. Колонку с датами назовите date.
Проследите за тем, чтобы абсолютные показатели были выражены целыми числами. Все показатели долей необходимо выразить в процентах. 
При их расчёте округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты. 
Поля в результирующей таблице: date, paying_users, active_couriers, paying_users_share, active_couriers_share

select table_1.date, paying_users,active_couriers, ROUND(paying_users::decimal/ SUM(new_users) over (order by table_1.date) *100,2) as  paying_users_share,
        ROUND(active_couriers::decimal/ SUM(new_couriers) over (order by table_1.date) *100,2) as  active_couriers_share
    from 
        (select niva_1.date as date, paying_users,active_couriers
            from 
            (select time::date as date, count(DISTINCT user_id) as paying_users
            from user_actions
            where order_id not in (select order_id from user_actions where action = 'cancel_order')
            group by date) as niva_1 
                        JOIN 
    
            (select time::date as date, COUNT(DISTINCT courier_id) as active_couriers
            from courier_actions
            where order_id NOT IN  (select order_id from user_actions where action = 'cancel_order') 
            group by date) as niva_2 ON niva_1.date=niva_2.date) table_1
                        JOIN 
        (SELECT niva_3.date as date, new_users,new_couriers
            FROM (SELECT date, count(user_id) as new_users
                  FROM   (SELECT min(time::date) as date,user_id
                         FROM   user_actions
                         GROUP BY user_id) as ua
                  GROUP BY date) as niva_3 
                        JOIN 
        (SELECT date, count(courier_id) as new_couriers
            FROM   (SELECT min(time::date) as date,courier_id
                    FROM   courier_actions
                    GROUP BY courier_id) as ca
        GROUP BY date) as nive_4 ON niva_3.date = nive_4.date
        ORDER BY date) table_2 ON table_1.date=table_2.date
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:
1)Долю пользователей, сделавших в этот день всего один заказ, в общем количестве платящих пользователей.
2)Долю пользователей, сделавших в этот день несколько заказов, в общем количестве платящих пользователей.
Колонки с показателями назовите соответственно single_order_users_share, several_orders_users_share. Колонку с датами назовите date. 
Все показатели с долями необходимо выразить в процентах. При расчёте долей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, single_order_users_share, several_orders_users_share

select date, ROUND(one_order::decimal/paying_users *100,2) as single_order_users_share,ROUND(more_1::decimal/paying_users *100,2) as several_orders_users_share
from (
select date, COUNT(user_id) as one_order
from (
 select time::date as date, user_id, COUNT(distinct order_id) 
from user_actions
where order_id not in (select order_id from user_actions where action = 'cancel_order')
group by date,user_id
HAVING COUNT(distinct order_id)=1) as s1
group by date) as niva_1 JOIN

(select date, COUNT(user_id) as more_1
from (
 select time::date as date, user_id, COUNT(distinct order_id) 
from user_actions
where order_id not in (select order_id from user_actions where action = 'cancel_order')
group by date,user_id
HAVING COUNT(distinct order_id)>1) as s2
group by date) as niva_2 USING(date) JOIN

(select date, paying_users
from (
select time::date as date, count(DISTINCT user_id) as paying_users
from user_actions
where order_id not in (select order_id from user_actions where action = 'cancel_order')
group by date) as s3) as niva_3 USING(date)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Для каждого дня, представленного в таблице user_actions, рассчитайте следующие показатели:
1)Общее число заказов.
2)Число первых заказов (заказов, сделанных пользователями впервые).
3)Число заказов новых пользователей (заказов, сделанных пользователями в тот же день, когда они впервые воспользовались сервисом).
4)Долю первых заказов в общем числе заказов (долю п.2 в п.1).
5)Долю заказов новых пользователей в общем числе заказов (долю п.3 в п.1).
Проследите за тем, чтобы во всех случаях количество заказов было выражено целым числом. Все показатели с долями необходимо выразить в процентах. При расчёте долей округляйте значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, orders, first_orders, new_users_orders, first_orders_share, new_users_orders_share

select date,orders,first_orders,new_users_orders, ROUND(first_orders::decimal/orders * 100,2) as first_orders_share,
      ROUND(new_users_orders::decimal/orders *100,2) as new_users_orders_share
from (
select niva_1.date as date, orders, first_orders, new_users_orders
from (
      select time::date as date, COUNT(distinct order_id) as orders
      from user_actions
      where order_id NOT IN (select order_id from user_actions where action='cancel_order')
      group by date
      order by 1) niva_1 
                           LEFT JOIN
      (select date, COUNT(user_id) as first_orders
      from (
             select user_id, MIN(time::date) as date 
             from user_actions
             where order_id NOT IN (select order_id from user_actions where action='cancel_order')
             group by 1
             order by 1) as niva_2
      group by date) as Niva_itog USING(date) 
                                               LEFT JOIN 
      (select niva_3.date, COUNT(order_id) as new_users_orders
      from ( 
             select user_id,MIN(time::date) as date 
             from user_actions
             group by 1
             order by 1) as niva_3 
                                                            LEFT JOIN
      (select time::date as date, user_id, order_id
      from user_actions
      where order_id not in (select order_id from user_actions where action = 'cancel_order')
      ) as niva_4 on niva_3.user_id = niva_4.user_id and niva_3.date = niva_4.date
      group by 1 ) as Niva_itog_1 USING(date)) as ITOG_ITOGOV
order by 1 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


На основе данных в таблицах user_actions, courier_actions и orders для каждого дня рассчитайте следующие показатели:
1)Число платящих пользователей на одного активного курьера.
2)Число заказов на одного активного курьера.
Колонки с показателями назовите соответственно users_per_courier и orders_per_courier. Колонку с датами назовите date. 
При расчёте показателей округляйте значения до двух знаков после запятой.
Результирующая таблица должна быть отсортирована по возрастанию даты.
Поля в результирующей таблице: date, users_per_courier, orders_per_courier
 
select niva_1.date, ROUND(paying_users::decimal/active_couriers,2) as users_per_courier,
ROUND(count_order::decimal/active_couriers,2) as orders_per_courier
from (
select time::date as date, count(distinct user_id) as paying_users
from user_actions
where order_id not in (select order_id from user_actions where action = 'cancel_order')
group by date) as niva_1 
                                JOIN
(select time::date as date, COUNT(DISTINCT courier_id) as active_couriers
from courier_actions
where order_id NOT IN  (select order_id from user_actions where action = 'cancel_order') 
group by date) as niva_2 USING(date)
                                JOIN
(select creation_time::date as date,COUNT(order_id) as count_order
from orders 
where order_id not in (select order_id from user_actions where action = 'cancel_order')
group by date
order by 1) as niva_3 USING(date)
order by 1
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Для каждого часа рассчитайте следующие показатели:
1)Число успешных (доставленных) заказов.
2)Число отменённых заказов.
3)Долю отменённых заказов в общем числе заказов (cancel rate).
Колонки с показателями назовите соответственно successful_orders, canceled_orders, cancel_rate. Колонку с часом оформления заказа назовите hour.
При расчёте доли отменённых заказов округляйте значения до трёх знаков после запятой.
Результирующая таблица должна быть отсортирована по возрастанию колонки с часом оформления заказа.
Поля в результирующей таблице: hour, successful_orders, canceled_orders, cancel_rate


select hour::integer, successful_orders, canceled_orders,
       ROUND(canceled_orders::decimal/(successful_orders+canceled_orders),3) as cancel_rate
from(
(select DATE_PART('hour',time) as hour,COUNT(order_id) as successful_orders
from user_actions
where order_id IN (select order_id from courier_actions where action='deliver_order')
group by 1   
order by 1) as niva_1 
                        JOIN
(select DATE_PART('hour',time) as hour,COUNT(DISTINCT order_id) as canceled_orders
from user_actions
where order_id IN (select order_id from user_actions where action='cancel_order') and  action = 'create_order'
group by 1   
order by 1) as niva_2 USING(hour)) as niva_itog
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
